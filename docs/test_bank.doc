#L001 W1
Урезанная форма языка программирования, созданная 
специально для решения определенного вида проблем:
$?  Lisp
$!  язык предметной области
$?  языковой инструментарий
$?  yacc

#L002 W1
Язык предметной области это:
$?  Не тьюринг полный язык.
$!  Язык созданный для решения узкого класса проблем.
$?  Язык позволяющий не программистам писать программы.
$?  Язык имеющий абстрактный синтаксис.

#L003 W1
Общее название для такого стиля разработки программного 
обеспечения, который строится вокруг использования ряда 
языков, специфичных для данной предметной области. 
$?  объектно ориентированное программирование
$!  языкоориентированное программирование
$?  языковой инструментарий

#L004 W1
Общий термин для всех видов приложений, разработанных 
для поддержки языкоориентированного программирования.
$?  малые языки
$!  языковой инструментарий
$?  yacc
$?  Lisp

#L005 W1
Два языка предметной области:
$?  могут иметь общий абстрактный синтаксис 
$!  могут иметь общий конкретный синтаксис
$!  не могут иметь общий абстрактный синтаксис
$?  не могут иметь общий конкретный синтаксис

#L006 W1
Укажите языки предметной области:
$!  малые языки
$?  yacc
$!  конфигурационные файлы XML
$?  Lisp

#L007 W1
Конфигурационные файлы XML являются
$!  Являются внешним языком предметной области (DSL)
$?  Являются внутренним языки предметной области (DSL)
$?  Не являются языком предметной области (DSL)

#L008 W1
Создание внутренних языков предметной области (DSL) возможно с использованием
$!  Lisp
$!  Ruby
$?  XML
$?  Yacc

#L009 W1
Укажите преимущества внешних языков предметной области (DSL)
$!  Можно задавать произвольный синтаксис
$?  Существует хорошая интеграция с основным языком
$!  Код более удобен для чтения
$?  Существуют удобные инструменты для языка
$!  Не требует высокой квалификации

#L010 W1
Укажите преимущества внутренних языков предметной области (DSL)
$?  Можно задавать произвольный синтаксис
$!  Существует хорошая интеграция с основным языком
$?  Код более удобен для чтения
$!  Существуют удобные инструменты для языка
$?  Не требует высокой квалификации

#L011 W1
Укажите языки наиболее подходящие для создания внутренних (DSL)
$?  C
$?  C++
$?  Java
$?  C#
$!  Lisp
$!  Smalltalk 
$!  Ruby

#L012 W1
Укажите элементы языка полезные при создании DSL
$!  замыкания 
$!  макросы
$!  аннотации
$?  ООП
$?  типизация

#L013 W1
Укажите основные шаги создания новых DSL:
$!  Определить абстрактный синтаксис
$!  Выбрать редактор
$!  Создать генератор
$?  Определить ключевые слова языка
$?  Определить операторы языка
$?  Определить формат для хранениея программ

#L014 W1
Укажите базовые свойства языкового инструментария:
$!  Пользователи могут легко создавать новые языки
$!  Языки являются взаимноинтегрированными
$!  Главным источником информации является модель приложения
$?  Создание языка не требует описания абстрактоного синтаксиса

#L015 W1
Укажите базовые свойства языкового инструментария:
$!  Пользователи нового языка манипулируют им с помощью проекционного редактора
$!  Языковой инструментарий может работать, даже если абстрактная 
модель содержит неполную или противоречивую информацию
$?  Языковой инструментарий позволяет задавать языки графически

#L016 W1
Укажите составляющие нового DSL:
$!  схема
$!  редактор (редакторы)
$!  генератор (генераторы)
$?  модель (модели)
$?  проект

#L017 W1
Исходным представление программы для языкового инструментария является:
$?  текстовый файл
$!  абстрактное представление программы
$?  конкретный синтаксис
$?  конкретное представление программы
